// pages/quiz/quiz.js
/**
 * @file 答题页面核心逻辑
 * @author MeowBread Team
 */
const quizService = require('../../utils/quiz.service.js');
const mistakeManager = require('../../utils/mistakeManager.js');
const learnedManager = require('../../utils/learnedManager.js');
const coinManager = require('../../utils/coinManager.js'); // 引入金币管理器
const statisticsManager = require('../../utils/statisticsManager.js'); // 引入统计管理器

Page({
  /**
   * 页面的初始数据
   */
  data: {
    quizMode: '', // 答题模式: quick 或 endless
    lessonFiles: [], // 课程范围标识 (数组)
    dictionaryId: '', // 当前词典ID ('all' 或具体ID)
    basePath: '', // 当前词典的基础路径 (如果非'all')
    allWordsInLesson: [], // 当前范围的所有单词
    questions: [], // 题目列表
    currentQuestionIndex: 0, // 当前题目索引
    userAnswer: '', // 用户答案
    isUserAnswerEmpty: true, // 用户答案是否为空 (用于填空题按钮状态)
    selectedOption: null, // 用户选择的选项 (针对选择题)
    showAnswerCard: false, // 是否显示答案卡片
    isCorrect: false, // 当前答案是否正确
    score: 0, // 得分
    totalQuestions: 0, // 总题数 (快速答题模式)
    actualAnsweredQuestions: 0, // 实际回答的题目数（不包括跳过的题目）
    coinsEarned: 0, // 本次答题获得的金币数
    timeSpent: 0, // 用时
    formattedTime: '00:00', // 格式化后的时间
    timer: null, // 计时器
    isLoading: true, // 加载状态
    showQuestion: true, // 用于控制题目显示/隐藏以触发动画
    highlightParticles: true, // 新增：是否高亮助词
    processedExampleSentence: '', // 新增：处理后的例句
    pageLoaded: false // 控制页面加载动画
    wrongQuestions: [], // 错题队列
    originalTotalQuestions: 0, // 原始题目总数
    isInWrongQuestionPhase: false, // 是否在错题重做阶段
  },

  /**
   * 生命周期函数--监听页面加载
   */
    /**
   * 生命周期函数--监听页面加载
   * @param {object} options - 页面启动参数，包含 mode, from, words 等
   */
  onLoad: async function(options) {
    const initialState = await quizService.initializeQuiz(options);

    // 添加调试信息，显示题目生成情况
    console.log('=== Quiz 页面初始化 ===');
    console.log('答题模式:', initialState.quizMode);
    console.log('生成题目数量:', initialState.questions?.length || 0);
    console.log('是否有补充题目:', initialState.questions?.some(q => q.isSupplementary) || false);
    
    // 统计补充题目数量
    const supplementaryCount = initialState.questions?.filter(q => q.isSupplementary).length || 0;
    if (supplementaryCount > 0) {
      console.log('补充题目数量:', supplementaryCount);
    }

    if (!initialState.questions || initialState.questions.length === 0) {
      this.setData({ isLoading: false }); // 加载结束
      wx.showModal({
        title: '提示',
        content: '根据当前筛选条件，没有可生成的题目。请尝试更改筛选设置。',
        showCancel: false,
        confirmText: '返回',
        success: () => {
          wx.navigateBack();
        }
      });
      return;
    }

    this.setData({
      ...initialState,
      isLoading: false, // 数据加载完毕，关闭加载状态
      score: 0,
      currentQuestionIndex: 0,
      actualAnsweredQuestions: 0, // 初始化实际回答题数
      userAnswer: '',
      isUserAnswerEmpty: true,
      selectedOption: null,
      showAnswerCard: false,
      isCorrect: false,
      timeSpent: 0,
      formattedTime: '00:00',
    });

    this.startTimer();
    
    // 触发加载动画
    this.triggerLoadAnimation();
    
    // 初始化错题相关状态
    this.setData({
      wrongQuestions: [],
      originalTotalQuestions: 0,
      isInWrongQuestionPhase: false
    });
    
    // 记录原始题目总数
    if (initialState.questions && initialState.questions.length > 0) {
      this.setData({
        originalTotalQuestions: initialState.questions.length
      });
    }
  },

  // 触发加载动画
  triggerLoadAnimation: function() {
    // 重置动画状态
    this.setData({
      pageLoaded: false
    });
    
    // 延迟触发动画，确保页面渲染完成
    setTimeout(() => {
      this.setData({
        pageLoaded: true
      });
    }, 100);
  },

  // 新增：切换助词高亮状态
  toggleHighlight: function() {
    const newState = !this.data.highlightParticles;
    this.setData({ highlightParticles: newState });
    if (this.data.showAnswerCard) {
      this.processHighlight(); // 如果答案卡已显示，立即处理高亮
    }
  },

  // 处理例句中的助词高亮
  processHighlight: function() {
    const currentQuestion = this.data.questions[this.data.currentQuestionIndex];
    const originalSentence = currentQuestion?.wordInfo?.['例句'] || '';
    const processedSentence = quizService.getHighlightedSentence(originalSentence, this.data.highlightParticles);
    this.setData({ processedExampleSentence: processedSentence });
  },







  handleAnswerInput: function(e) {
    const userAnswer = e.detail.value;
    this.setData({
      userAnswer: userAnswer,
      isUserAnswerEmpty: userAnswer.trim() === ''
    });
  },

  // 输入框确认按钮事件处理
  onInputConfirm: function(e) {
    // 如果用户答案不为空且未显示答案卡，则提交答案
    if (!this.data.isUserAnswerEmpty && !this.data.showAnswerCard) {
      this.submitAnswer();
    }
  },

  onOptionSelect: function(e) {
    const selected = e.currentTarget.dataset.option;
    this.setData({ 
      userAnswer: selected,
      selectedOption: selected
    });
  },

  /**
   * 提交答案，进行对错判断，并更新UI和数据
   */
  submitAnswer: function() {
    const currentQ = this.data.questions[this.data.currentQuestionIndex];
    const isCorrect = quizService.checkAnswer(currentQ, this.data.userAnswer);

    // 只有提交答案才算实际回答了题目（跳过不算）
    const newAnsweredCount = this.data.actualAnsweredQuestions + 1;

    if (isCorrect) {
      // 答对了：只有在错题库模式下才修正错题状态
      if (this.data.quizMode === 'mistakes' || this.data.fromMistakes) {
        mistakeManager.correctMistake(currentQ.wordInfo);
      }
      
      // 在错题重做阶段答对不修正错题库状态
      if (!this.data.isInWrongQuestionPhase) {
        // 标记单词为已背（需要获取词典ID）
        this.markWordAsLearned(currentQ); // 传递整个题目对象
      }
      
      // 回答正确，增加1个金币
      coinManager.addCoins(1);
    } else {
      // 答错了：添加到错题库
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
    }

    // 更新统计数据
    this.setData({
      actualAnsweredQuestions: newAnsweredCount,
      showAnswerCard: true,
      isCorrect: isCorrect,
      userAnswer: this.data.userAnswer
    });

    // 处理例句高亮
    this.processHighlight();

    // 清除定时器
    this.clearTimer();

    // 如果是无尽模式且答对了，生成新题目
    if (this.data.quizMode === 'endless' && isCorrect) {
      this.generateNewQuestionForEndless();
    }
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });
      }
      
      // 答错处理
      mistakeManager.addMistake(currentQ.wordInfo);
      
      // 如果不在错题重做阶段，将错题加入重做队列
      if (!this.data.isInWrongQuestionPhase) {
        const wrongQuestions = this.data.wrongQuestions;
        wrongQuestions.push(currentQ);
        this.setData({ wrongQuestions });